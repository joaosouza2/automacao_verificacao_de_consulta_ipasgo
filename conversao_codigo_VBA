import time
import openpyxl
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import TimeoutException, NoSuchElementException, WebDriverException
import os

class IpasgoAutomation:
    def __init__(self, excel_file_path):
        # Initialize the webdriver
        self.options = Options()
        self.options.add_argument("--start-maximized")
        self.driver = webdriver.Chrome(options=self.options)

        # Load the Excel workbook
        self.workbook = openpyxl.load_workbook(excel_file_path)
        self.sheet = self.workbook['2 - Base_Guias']
        self.total_rows = self.sheet.max_row

        # User credentials
        self.username = ''
        self.password = ''

    def get_credentials(self):
        # Prompt the user for credentials
        self.username = input("Digite seu nome de usuário: ")
        self.password = input("Digite sua senha: ")

    def login(self):
        try:
            self.driver.get("https://portalos.ipasgo.go.gov.br/Portal_Dominio/PrestadorLogin.aspx")
            time.sleep(2)

            # Enter username
            username_input = self.driver.find_element(By.ID, "SilkUIFramework_wt13_block_wtUsername_wtUserNameInput2")
            username_input.send_keys(self.username)

            # Enter password
            password_input = self.driver.find_element(By.ID, "SilkUIFramework_wt13_block_wtPassword_wtPasswordInput")
            password_input.send_keys(self.password)

            # Click login button
            login_button = self.driver.find_element(By.ID, "SilkUIFramework_wt13_block_wtAction_wtLoginButton")
            login_button.click()
            time.sleep(5)

            # Handle potential iframe alert
            try:
                iframe = self.driver.find_element(By.TAG_NAME, "iframe")
                self.driver.switch_to.frame(iframe)
                close_alert = self.driver.find_element(By.XPATH, "//a[contains(@id, 'wt15')]/span[contains(@class, 'fa-close')]")
                close_alert.click()
                time.sleep(2)
                self.driver.switch_to.default_content()
            except NoSuchElementException:
                pass

            time.sleep(5)

            # Navigate to the portal webplan
            portal_webplan_link = self.driver.find_element(By.XPATH, "//*[@id='IpasgoTheme_wt16_block_wtMainContent_wtSistemas_ctl08_SilkUIFramework_wt36_block_wtActions_wtModulos_SilkUIFramework_wt9_block_wtContent_wtModuloPortalTable_ctl04_wt2']/span")
            portal_webplan_link.click()
            time.sleep(5)

            # Switch to the new window
            self.driver.switch_to.window(self.driver.window_handles[1])
            time.sleep(5)

            # Call the method to locate procedures
            self.localize_procedures()

        except Exception as e:
            print("Erro ao realizar o login. Verifique suas credenciais e tente novamente.")
            self.driver.quit()
            raise e

    def localize_procedures(self):
        try:
            # Locate and click on the procedures menu
            procedures_button = self.driver.find_element(By.CSS_SELECTOR, ".localizar-procedimentos-icon")
            self.driver.execute_script("arguments[0].scrollIntoView(true);", procedures_button)
            time.sleep(2)
            procedures_button.click()
            time.sleep(5)

            # Close any alerts if present
            try:
                alert_button = self.driver.find_element(By.XPATH, '//*[@id="button-1"]')
                alert_button.click()
                time.sleep(2)
            except NoSuchElementException:
                pass

        except Exception as e:
            print("Erro ao acessar o menu de procedimentos.")
            self.driver.quit()
            raise e

    def process_guides(self):
        # Loop through the rows in the Excel sheet
        for i in range(6, self.total_rows + 1):
            num_guia = self.sheet.cell(row=i, column=3).value  # Column C
            totalconf = self.sheet.cell(row=i, column=15).value  # Column O
            pendencia = 0

            if totalconf > 0:
                try:
                    # Insert the guide number
                    input_guia = self.driver.find_element(By.XPATH, "/html/body/main/div[1]/div[1]/div[2]/div[1]/div[2]/input-text-search/div/div/div/input")
                    input_guia.clear()
                    input_guia.send_keys(num_guia)

                    # Scroll down
                    body_element = self.driver.find_element(By.TAG_NAME, 'body')
                    body_element.send_keys(Keys.PAGE_DOWN)
                    body_element.send_keys(Keys.PAGE_DOWN)
                    time.sleep(1)

                    # Click on the search button
                    button_find_guia = self.driver.find_element(By.ID, "localizar-procedimentos-btn")
                    self.driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", button_find_guia)
                    button_find_guia.click()
                    time.sleep(2)

                    # Check if the confirmation button is present
                    try:
                        button_confirm_xpath = "//*[@id='localizarprocedimentos']/div[2]/div/div[2]/div/div[2]/div[1]/div/div/div/div[2]/div[2]/div/div[1]/div/div[1]/div[2]/div/i[2]"
                        button_confirm = self.driver.find_element(By.XPATH, button_confirm_xpath)
                        click_confirm = True
                    except NoSuchElementException:
                        click_confirm = False

                    linha_index = 1
                    while click_confirm:
                        try:
                            # Click on the confirmation button
                            button_confirm.click()
                            time.sleep(2)

                            # Find the table of procedures
                            data_table = self.driver.find_element(By.XPATH, "//*[@id='confirmar-procedimentos-modal']/div/div/div[2]/div[2]/div/div[2]/div")
                            linhas = data_table.find_elements(By.CLASS_NAME, "row")

                            # Check the status of the procedure
                            status_seq_xpath = f"//*[@id='confirmar-procedimentos-modal']/div/div/div[2]/div[2]/div/div[2]/div/div[{linha_index}]/div[2]"
                            status_seq = self.driver.find_element(By.XPATH, status_seq_xpath)

                            if status_seq.text == "Não confirmado":
                                if totalconf > 0:
                                    # Confirm the procedure
                                    check_confirma_xpath = f"/html/body/main/div[1]/div[9]/div/div/div[2]/div[2]/div/div[2]/div/div[{linha_index}]/div[5]/div/span[1]"
                                    check_confirma = self.driver.find_element(By.XPATH, check_confirma_xpath)
                                    check_confirma.click()
                                    time.sleep(1)

                                    campo_carteira = self.driver.find_element(By.XPATH, "//*[@id='numeroDaCarteiraConfirmacao']")
                                    campo_carteira.clear()
                                    numero_carteira = self.sheet.cell(row=i, column=16).value  # Column P
                                    campo_carteira.send_keys(numero_carteira)
                                    campo_carteira.send_keys(Keys.TAB)
                                    time.sleep(1)

                                    button_confirm_modal = self.driver.find_element(By.XPATH, "//*[@id='indentificar-confirmar-procedimentos-modal']/div/div/div[3]/div/button[2]")
                                    button_confirm_modal.click()
                                    time.sleep(2)

                                    pendencia += 1
                                    self.sheet.cell(row=i, column=17).value = pendencia  # Update column Q with pendencia
                                    totalconf -= 1
                                else:
                                    # Close the modal if there are no more confirmations
                                    button_close_modal = self.driver.find_element(By.XPATH, "//*[@id='confirmar-procedimentos-modal']/div/div/div[3]/button")
                                    button_close_modal.click()
                                    time.sleep(1)
                                    break  # Go to the next guide
                            else:
                                totalconf -= 1
                                button_close_modal = self.driver.find_element(By.XPATH, "//*[@id='confirmar-procedimentos-modal']/div/div/div[3]/button")
                                button_close_modal.click()
                                time.sleep(1)

                            time.sleep(2)

                            # Close any alerts if present
                            try:
                                click_spam = self.driver.find_element(By.XPATH, "/html/body/ul/li/div/div/span")
                                click_spam.click()
                            except NoSuchElementException:
                                pass

                            linha_index += 1
                            if linha_index > len(linhas):
                                click_confirm = False

                        except Exception as e:
                            # If an error occurs, go to the next guide
                            break

                    # Scroll up
                    body_element.send_keys(Keys.PAGE_UP)

                except Exception as e:
                    print(f"Erro ao processar a guia {num_guia}: {e}")
                    continue  # Continue to the next guide

        # Save the changes in the Excel file
        self.workbook.save('caminho_para_seu_arquivo.xlsx')

    def run(self):
        try:
            self.get_credentials()
            self.login()
            self.process_guides()
        finally:
            self.driver.quit()

# Example of using the class
if __name__ == "__main__":
    # Provide the path to your Excel file
    excel_file_path = 'caminho_para_seu_arquivo.xlsx'
    automation = IpasgoAutomation(excel_file_path)
    automation.run()
